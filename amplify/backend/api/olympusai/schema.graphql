

type Camera @model {
  id: ID!
  name: String!
  description: String
}

type Equipment @model {
  id: ID!
  name: String!
  description: String
}

type Station @model {
  id: ID!
  name: String!
  description: String
}


type Equipment_Notification {
  id: ID!
  action: String
  launchType: String
}


type Equipment_Confirmation {
  id: ID!
  equipmentName: String
}

type Trigger {
  id: ID!
  action: String

}


input Equipment_Notification_Input {
  id: ID!
  action: String
  launchType: String
}

input Equipment_Confirmation_Input {
  id: ID!
  equipmentId: String
  
}
input Trigger_Input {
  id: ID!
  user: String
  method:String
}
type ResultTest {
  id: ID!
  status: String
}





type Query {
  # called by client to initiate long running search
  stationConfigurations(StationID: String!): ResultTest


}

type Mutation {
  # called by backend when search is complete

  publishEquipmentNotification(notification: Equipment_Notification_Input): Equipment_Notification
  publishEquipmentConfirmation(confirmation: Equipment_Confirmation_Input): Equipment_Confirmation
  triggerWorkout(trigger: Trigger_Input): Trigger

}

type Subscription {

      onEquipmentNotification(id: ID!): Equipment_Notification
    @aws_subscribe(mutations: [ "publishEquipmentNotification" ])
      onEquipmentConfirmation(id: ID!): Equipment_Confirmation
    @aws_subscribe(mutations: [ "publishEquipmentConfirmation" ])
      onTrigger_Workout(id: ID!): Trigger
    @aws_subscribe(mutations: [ "triggerWorkout" ])

}

schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}